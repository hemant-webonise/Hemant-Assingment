package MenuShow;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuFilePuller {


	double MinimumCompare = 100;
	double RetorantsCost=0;
	boolean valueMeal=false;


	public void display(Map<Integer, Map<String, Double>> outerMap)
	{
		Map<String, Double> innerMap = new HashMap<String, Double>();

		System.out.println("In Display\n"+outerMap);

		/*for(Integer key:outerMap.keySet())
		{

			innerMap = outerMap.get(key);
			System.out.print(" Restaurant ID : "+key+"\n");

			for(String food:innerMap.keySet())
			{
				System.out.println(food+" "+innerMap.get(food));
			}
			innerMap.clear();
			System.out.println();
		}*/

	}


	public void Search(Map<Integer, Map<String, Double>> outerMap){
		Map<String, Double> innerMap = new HashMap<String, Double>();	   	   
		System.out.println("In Search");
	}




	public boolean isValueMeal() {
		return valueMeal;
	}

	public void setValueMeal(boolean valueMeal) {
		this.valueMeal = valueMeal;
	}

	public double getRetorantsCost() {
		return RetorantsCost;
	}

	public void setRetorantsCost(double RetorantsCost) {
		this.RetorantsCost = RetorantsCost;
	}

	public double getMinimumCompare() {
		return MinimumCompare;
	}

	public void setMinimumCompare(double MinimumCompare) {
		this.MinimumCompare = MinimumCompare;
	}

	public int getCheapestRestaurant(Map<Integer, Map<String, Double>> restaurants, List<String> items)
	{
		boolean hasMenu;
		Map<String, Double> menuItems = new HashMap<String, Double>();
		int restID = -1;
		for(Integer key:restaurants.keySet())
		{
			menuItems.clear();
			menuItems = restaurants.get(key);
			//System.out.println(menuItems);
			hasMenu = isHavingTheMenu(menuItems, items);

			if(hasMenu)
			{
				System.out.println("Restaurant "+key+" has menu");
				System.out.println("Cost = "+this.getRetorantsCost());
				if(this.getRetorantsCost()<this.getMinimumCompare())
				{
					this.setMinimumCompare(this.getRetorantsCost());
					restID = key;
				}
				//MinimumCompare = getBill(menuItems, items);
			}
		}
		return restID;
	}

	public boolean isHavingTheMenu(Map<String, Double> menuItems, List<String> items)
	{
		boolean havingMenu=true, found;
		double cost=0;
		for(String item : items)
		{
			found = containsItem(menuItems, item);
			//System.out.println(item+" "+found);
			if(found)
			{
				//for(String i:menuItems.keySet())
				//	System.out.println(i);
				//System.out.println(item+" = "+menuItems.get(item));
				cost += menuItems.get(item);
			}
			if(havingMenu==false || found==false)
				havingMenu = false;
		}
		if(havingMenu == true && cost<MinimumCompare)
			this.setRetorantsCost(cost);
		//System.out.println(items+" are having "+havingMenu);
		return havingMenu;
	}


	public boolean containsItem(Map<String, Double> menuItems, String item)
	{
		for(String menu : menuItems.keySet())
		{
			//System.out.println(menu+" "+item);
			if(menu.equals(item))			
			{				
				return true;				
			}
			if(menu.contains(item))
			{
				this.setValueMeal(true);
			}
		}
		return false;
	}









	public Map<Integer, Map<String, Double>>   Pull(){

		/*Creating Maps
		 * */

		Map<Integer, Map<String, Double>> outerMap = new HashMap<Integer, Map<String, Double>>();
		Map<String, Double> innerMap = new HashMap<String, Double>();


		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader("sample_data.csv"));
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String line;

		try {
			while((line=reader.readLine())!=null)
			{
				String [] Column =line.split(",", 3);


				/*index 0 is RetorantID, index 1 is Prices, 
				 * index 2 is Food for the price*/
				System.out.println(Column[2]);
				/*
				 * Prints out any one column considering the last one as only one Column\
				 *  */

				innerMap = new HashMap<String, Double>();

				if(outerMap.isEmpty()) {
					innerMap.put(Column[2],Double.parseDouble(Column[1]));
					outerMap.put(Integer.parseInt(Column[0]), innerMap);

				}
				else{
					if(outerMap.containsKey(Integer.parseInt(Column[0]))){
						innerMap=outerMap.get(Integer.parseInt(Column[0]));
						innerMap.put(Column[2],Double.parseDouble(Column[1]));
						outerMap.put(Integer.parseInt(Column[0]), innerMap);

					}
					else{
						innerMap.put(Column[2],Double.parseDouble(Column[1]));
						outerMap.put(Integer.parseInt(Column[0]), innerMap);
					}
				}


			}
			display(outerMap);
			
		} catch (IOException fileNotFException) {
			// TODO Auto-generated catch block
			System.out.println("File not Found on the expected loaction./n :(");
			fileNotFException.printStackTrace();
		}
		return  outerMap;

	}



}
